====== Алгоритмы ======

  - Устройство компьютера. Алгоритмы. Блок-схемы.
  - Элементарные алгоритмы.
  - Понятие переменной, типа данных, оператора (Арифметические операции. Тип double.). Структура программы в C++.
  - Ввод-вывод в текстовом режиме.
  - Базовый синтаксис С++
  - Циклы
  - Решение задач с использованием циклов обоих типов
===== Устройство компьютера. Алгоритмы. Блок-схемы. Элементарные алгоритмы=====
==== Устройство компьютера ====
//Компьютер - электронно-вычислительная машина, предназначенная для передачи, хранения и обработки информации. //
Передает информацию на монитор, на принтер (Визуализатор)
Хранит информацию на жестком диске.
Обрабатывает с помощью процессора и оперативной памяти.

В программировании чаще всего используется оперативная память, в ней хранятся основные, текущие данные. После того, как они уже не нужны - они удаляются из нее. (В отличии от жесткого диска).
Это я добавлю в этот раздел: Компилятор - программа, которая преобразует ваш программный код в машинный язык, из этого языка создается исполняемый файл (в Windows .exe). Этот файл и есть программа. Наша организация предпочитает open source. А следовательно мы рекомендуем программу **CodeBlocks**.

==== Алгоритмы и блок-схемы. ====
//Алгоритм - конечная последовательность действий, которая приводит к решению поставленной задачи//
Алгоритмы мы соблюдаем в нашей жизни и тут и там. К примеру каждый день ездим на работу, в школу, в институт и так далее. Все делаем по определенному алгоритму. Выходим из дома > Доходим до метро > Едим до той-то станции > Пересадка на ту линию > Едим до той-то станции > Пешком до работы. Это пример простейшего повседневного алгоритма.

Алгоритмы можно задавать по разному. К примеру, словесно, так как было описано выше. Также существуют специальные алгоритмические языки для данного дела. Но чаще всего алгоритм задается с помощью блок-схемы.

Блок-схема состоит из нескольких блоков : {{:modern-programming:algo:theory:algorithms:все_блоки.png|}}

Блок "Начало" символизирует о том, что далее идет алгоритм программы. Соответственно блок "Конец" говорит о том что алгоритм завершен.
Блок ввода - говорит о том что нам каким-либо путем вводятся данные. В случае программирования они могут браться из файла или печататься с клавиатуры или др.
Блок вывода - счас что-то будет выведено. В случае программирования, скорее всего, на экран. Но может выводится в файл.
Универсальный блок - по сути, это все остальные блоки. В нем мы (в случае программирования), выполняем операции, вызываем функции, объявляем о новых объектах.
К примеру в него можно записать : A = 10. Присвоить А значение 10. Или проделать операцию : A = B + C. Сумма B и C кладется в А.

Условный оператор (см. далее if) выглядит в виде ромба с двумя ответвлениями. Внутри ромба - условие. Если условие выполняется, то наш алгоритм пойдет дальше по ветви со знаком "+", если условие же неверно, то наоборот, со знаком "-". 
!!Главное чтобы все блоки имели одно начало и один конец!!
То есть, если у вас одна стрелка входит в условный оператор, то столько же стрелок (1) должно выходить из него.

Блоки циклов (см. далее циклы).
Цикл - набор повторяющихся действий, которые выполняются до тех пор, пока условие цикла **верно**.   
Первый цикл - с предусловием. Сначала идет условие цикла, а потом лишь выполняющиеся действия.
Второй цикл - с постусловием. Наоборот. Сначала идет выполняющееся действие, а потом идет условие.

==== Элементарные алгоритмы ====

Алгоритмы можно разделить на элементарные и составные. Элементарные делятся на линейные и ветвящиеся ( от слова ветвь ).
Соответственно, алгоритмы линейные могут иметь только один исход, так что в силу своей тривиальности, мы долго на них не остановимся. см. задачи (номера задач)

Ветвящиеся алгоритмы куда интереснее. Они имеют несколько путей решения, в зависимости от входных данных или других факторов. См. задачи (Номера задач)

===== Понятие переменной, типа данных, оператора. Структура программы в C++ =====
==== Понятие переменной, тип данных ====

Переменная - изменяемая область памяти имеющая идентификатор. Переменная может принимать разные значения в зависимости от типа данных. Типы бывают разные:
  *Символьный : char    
  *Целочисленный : int
  *Целочисленный беззнаковый : unsigned int (только положительные по сути)
  *С плавающей точкой : double (двойной точности), float.
  *Логический : bool (true или false)

**Забегая немного вперед:**
<code C++>
int a; // Объявляем переменную целочисленного типа //
a = 30; // Присваиваем ей значение 30 // 
cout << a; // Выводим значение переменной a на экран //
</code>
Или:
<code C++>
int a; //Объявление переменной a целочисленного типа //
cin >> a; // Вводим значение переменной с клавиатуры.//
cout << a; // Выводим на экран.//
</code>
Объявление переменной без значения по умолчанию в ряде случаев никак не повлият на результат выполнения программы, но переменные без начального значения - очень плохой стиль программирования.
Представьте к каким ошибкам может привести использование переменной, которой разработчик забыл задать изначальное значение.
Значение по умолчанию переменной может быть указано при объявлении переменной, например :
<code C++>
int a = 100; // объявление переменной a с исходным значением 100 
</code>
Если переменная не используется до поры - до времени, то лучше все равно задать исходное значение. Например, как это часто делается, равным нулю :
<code C++>
int a = 0; //Объявление переменной a целочисленного типа со значением ноль //
cin >> a; // Вводим значение переменной с клавиатуры.//
cout << a; // Выводим на экран.//
</code>

==== Понятие оператора ====
Операторы служат для работы со значениями. В нашем случае, рассмотрим частный случай : с переменными.
Операторы делятся на три вида: Унарные, Бинарные, Тернарные FIXME
Унарные операторы:
а++ Инкремент - увеличение значения переменной на единицу.
++а Тоже инкремент, но есть различия в приоритетах.

a++ :
  * Старое значение переменной сохраняется для использования в дальнейшем выражении, в котором встретилась эта переменная
  * Только **после** этого ее значение сразу же изменяется на 1. 
++a
  *   **Сначала** переменная изменяется на 1
  *   Только после этого используется в выражении.

––а - Декремент - уменьшение на единицу.
а–– - Тоже декремент. Разница аналогична Инкременту

-а - Данная операция меняет знак числа на противоположный

Бинарные:
а=с - Операция присвоения. Переменной а присваивается значение переменной с
а+с - Операция сложения. Результатом операции является сумма значений переменных а и с
а-с - Операция разности. Результатом операции является разность значений переменных a и с
а*с - Операция умножения. Результатом операции является произведение значений переменных а и с
а/с - Операция деления. В случае если а и с - целые числа, то деление целочисленной и дает целое число. Без остатка. При делении 5/2 получаем ответ 2. В случае если с имеет значение с плавающей точкой мы получаем значение с плавающей точкой. 

а%с - Остаток от целочисленного деления. Соответственно а и с должны быть целочисленными. 
Пример
cout << 5%2; 
Вывод : 1

а+=с - Сокращенная форма сложения. Аналогична a = a + c.
а-=с - Сокращенная форма разности. Аналогична a = a - c.

a==c (равно ли?) a<=с (а меньше либо равен с?) a>=c (а больше либо равен с?) a>c (а больше с?) a<c (а меньше либо равен с?) - Операторы сравнений. На выход дают значение true (истина) или false (ложь) 
a!=c (не равно ли?)

Тернарные:
cout << ( (a < x) ? (a+b) : (a-b) );

Тернарная операция может работать с тремя переменным одновременно. В данном примере :" если а < x, то выведи на экран a+b, иначе выведи на экран a-b".

===== Структура программы в С++ =====
//В данный момент мы рассматриваем программирование в консоли.//

Немножко отступим от темы. Так как дальше это очень часто используется. Существует такое понятие как комментарий.
Комментарии не видны компиляторам. Их очень удобно использовать для пояснений.
Выглядят они так :
<code C++>
// - Комментарий-строка. 

/* Более широкий комментарий
   Не реагирует на перенос строки */

</code>

Программа в С++ это набор операций которые выполняться внутри главной функции C++
<code C++>
void main (){
   /*Действия совершаемые вашей программой*/
}
</code>

void main () - функция. !!Касаться этой темы мы не будем, но вот ссылочка. (ВСТАВИТЬ ССЫЛКУ НА ФУНКЦИИ)!!
{ - Аналог начала в блок схеме. Это начало выполнения функции и соответственно после этого обозначения пойдет ваша программа. **Все что создается между { } существует только внутри скобочек** 

Пример простейшей программы:

<code C++>

#include <iostream>       //Данная команда подключают библиотеку iostream. Данная библиотека содержит команды cin >> () и cout << ()
using namespace std;      //Данная команда говорит о том что мы находимся в стандартном пространстве имен. 
                          //Лучше пока не заморачиваться на эту тему. О них можно посмотреть здесь (ССЫЛКА НА ПРОСТРАНСТВО ИМЕН). 

void main(){                   /*Начало выполнения программы*/

 cout << "Hello, World!";      /*Вывод на экран строки "Hello, World!" (выведется без кавычек) */

} /*Конец программы*/
</code>
К слову, двойные кавычки говорят компилятору о том что между кавычек находиться строка, а одинарные говорят, что символ. Соответственно каждая программа имеет начало и имеет конец.

===== Синтаксис =====
==== Работа с переменными ====
<code C++>
void main(){
 int a = 12, b = 13, c;         // Объявление трех переменных целого типа. a и b инициализируются значениями 12 и 13.
 cout << a + b;                 // на экран выведется число 25. Со значениями а и b ничего не случиться. 
 c = b - a;                     // Присвоим переменной c разность переменных b и a; То бишь значение 1.
                                // Далее поменяем две переменные местами. 
 c = b;                         // Присвоим значение b переменной c. Так сказать с - буфер.
 b = a;                         // Присвоим значение переменной b равное значению переменной a
 a = c;                         // Присвоим значение а переменной с = бывшему значению с. 
 a = a + 1;                     // Присваиваем переменной a новое значение, которое больше а на единицу. То бишь увеличить значение переменной а.
 а--;                           // Используем декремент. Это уменьшит значение переменной а на единицу. 
}                               //Завершаем программу
</code>

==== Работа с условиями ====
Условия можно задать несколькими способами. Рассмотрим два из них. 
1. if () {} else {} - условный оператор
2. swith () { case : break; case default : break; } - "переключатель"
=== If - если ===
Если условие истинно, сделай это, если нет, сделай то-то.
На примере:
<code C++>
void main(){ //Начало выполнения программы

 int a, b; // Объявляем две переменные целого типа а и b.

 cin >> b >> a; // Вводим с клавиатуры оба значения. Сначала b. Потом a.
 if (a > b) /* Идет сравнение. Оператор > вернет в условие значение true или false. Если a>b, то условие выполняется, и переходит по первой ветки.
Если же условие не выполняется, то идет по второй ветке. */
 {  
  cout << a;  //Выведет переменную а. Выполняется первая ветка, то есть когда условие выполняется
 } 
 else //Оператор который переводиться как "иначе". Если условие if __не__ выполняется, то то, что описано далее выполняется.
 {
  cout << b; // Вывод на экран переменной b. Данное действие выполняется тогда, когда изначальное условие в if неверно. То бишь a < b.
 } // Конец выполнения второй ветки и завершение if.
} //Конец программы
</code>

Приведенная выше программа позволяет пользователю ввести два числа и выводит на экран наибольшее из двух чисел.

__Важно!__
Внутри { } можно записывать большие куски кода, которые могут содержать сложные структуры (к примеру другие if или циклы). Все значения которые объявляются внутри { } существуют только внутри { }. Все что объявлено выше if и было изменено внутри { } потерпит изменения.

=== Switch, выбери меня ===
Switch разветвляет вашу программу лучше всех, поверьте. 
Отличия от if :
  * Работает только с четко заданными значениями.
  * Количество ветвлений у switch может быть больше 2.

Пример:
<code C++>
 void main ()
 {
  int a;                              //Объявляем переменную целого типа по имени а.
  cin >> a;                           // Вводим а с клавиатуры
   switch (a) {                       //Переходим в switch. Внутри ( ) указывают переменную или что-то другое имеющее значения. Switch обрабатывает это значение.
   case 1: cout << "единица"; break;  // Если а была равна 1, то он пройдет внутри case 1: Тут действия break; Соответственно выведется на экран "строка единица"
   сase 2: cout << "двойка"; break;   // Если а равна 2, то выведется "двойка"
   case 6: cout << "шестерка"; break; // Если а = 6, то выведется "шестерка"
   default: cout << "Ни то, ни се";   // Во всех остальных случаях, выведется "Ни то, ни се".      
  }
 }    
</code>
**Замечание**: у default нет завершающего оператора break;


===== Циклы =====
Положим, что нам поставлена задача. С клавиатуры вводятся числа - конец ввода число 0. Вывести на экран предпоследнее число. 
Очевидно, что теми средствами, которыми мы располагаем, данную задачу не решить. Для этой задачи нам потребуются циклы.
Цикл - это определенный программистом набор команд, которые многократно выполняются пока некоторое условие истинно.
Рассмотрим пример:
Пример блок-схемы.

==== Типы циклов, Синтаксис ====
Циклы делятся на два типа:
  * С предусловием
  * С постусловием    

<fc #FF0000>Разница состоит в том, что в цикле с предусловием, мы сначала спрашиваем, а потом выполняем действия. 
В цикле с постусловием, мы прежде выполняем действия, а потом спрашиваем. 
**Рациональнее использовать** цикл с предусловием, так как цикл с постусловием обязан выполниться хотя бы один раз, что может вызвать непредвиденные ошибки.</fc>

В С++ есть 3 распространенных цикла:
  * for
  * do { }while();
  * while(){ } 

=== For ===
Тип цикла : с предусловием 
Используется чаще всего при переборе значений.
Синтаксис : <code C++>
int i; 
for (i=0, i<15, i++){
  cout << i;          //В данном случае выводит переменную i. Это наше повторяющееся действие.
}

</code>//
или
<code C++>
int i;
unsigned int d; //Целочисленный беззнаковый тип. (нет отрицательных чисел)
cin >> d;
for (i=0; i<d; i++){
 cout << '!';
}
</code>
**1 программа**
Переводиться так : "Выполняйся с таким начальным значением счетчика(i=0), пока оно не достигнет такого значения (i<15), таким путем (i++)"
Что записано в скобках?
i - переменная **счетчик**. Она "тикает" (увеличивается на 1 (i++) ) на каждое выполнение цикла до тех пор пока условие i < N выполняется. 
i = 0 - начальное значение счетчика. Можно написать что i = 1. Если нужно считать с 1.
i < N - Означается что цикл будет выполняться, пока i < 15.
i++ - необходимая операция над счетчиком. Можно написать также i-- (если нужно i уменьшать, но скорее всего придется менять начальное значение)
Также существует понятие **итерация**. Итерация - это один проход цикла.
**2 программа**
Объявляются две переменных целового типа. Одна из них беззнаковая. Она вводится с клавиатуры (cin >> d)
Соответственно, данная программа выведет нам на экран все целые числа от 0 до N.

**Достоинства цикла:** емкая, понятная запись.
**Недостатки цикла:** нет

=== do {} while(); ===
Переводиться так : "Делай { то-то } пока (это верно)"
Тип цикла : с постусловием
Синтаксис будет разобран на примере той задачи, что была поставлена ранее:  С клавиатуры вводятся числа - конец ввода число 0. Вывести на экран предпоследнее число. 
<code C++> 
void main(){
 int a=0,b=0;        //Инициализация 2-ух переменный a и b нулями.
 do{                 //начало выполнения цикла.
  b = a;             //Кладем значение переменной a в переменную b. Таким образом мы запоминаем предыдущее значение переменной a.
  cin >> a;          //Вводим с клавиатуры переменную а. Это и предыдущее действие будут повторяться, пока условие
 }while(a!=0);       //a != 0, то есть a не равно 0, выполняется. Следовательно когда a равен нулю, то мы 
 cout << b;          //Выходим из цикла и выводим на экран переменную b, которая хранила в себе значение a перед нулем.
}
</code>

//Попробуйте себе ответить на вопрос : может ли на экран вывестись 0? Если да, то когда?//
**Достоинства цикла :** Может работать с неизвестным количеством итераций
**Недостатки цикла :** Он с постусловием, так что может выполниться хотя бы один раз.

=== while(){ } ===
Переводиться так : "Пока (это верно) делай {это}"
Тип цикла : с предусловием
Синтаксис на примере задачи : с клавиатуры вводиться число k. вывести на экран k долларов.
<code C++>
void main()
{
 int k = 0;        //Инициализируем k нулем
 cin >> k;         //Вводим k с клавиатуры
 while(k>0)        //Начало цикла. Пока k > 0. (В данной программе мы используем переменную k, 
 {                 //как счетчик. Мы можем это делать так как нам не важно ее значение внутри цикла.)*  
  cout << '$';     //Выводим на экран $. Это наше повторяющееся действие.
  k--;             //Декремент переменной k для того чтобы достичь 0, это означает что мы прошли цикл k раз.
 }                 //Конец цикла.
}
</code>
Самостоятельно напишите программу используя цикл с предусловием и никаких больше условных операторов. Попробуйте ввести с клавиатуры число 0.
