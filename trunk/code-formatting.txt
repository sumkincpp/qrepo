====== Форматирование кода ======

Любая синтаксически правильно написанная программа на многих языках программирования(в том числе и на С++) будет работать, даже если не уделять внимания на форматирование.

Пример плохо форматированной программы :

<code cpp>
#include<iostream>

int main(){ std::cout<<"Hello world";return 0;}
</code>

Не смотря на то, что эта программа небольшая, и написана синтаксически правильно, её сложно читать. Если форматировать таким же стилем и более большую программу, то её сложнее будет читать, отлаживать и поддерживать.

В тоже время эту простую программу нетрудно отформатировать и привести к читабельному виду :

<code cpp>
#include<iostream>

int main() { 
    std::cout << "Hello world";
    return 0;
    }
</code>

Когда один проект пишет много программистов с различными стилями, наступает т.н. "code hell", когда весь код программы невозможно отнести к одному единому стилю; тогда между программистами возникают споры по поводу правильного форматирования кода. Тогда, на общем совещании программистами решается какой единый стиль форматирования использовать в проекте. Создается документ с описанием стиля команды, и, если в команду приходит новый человек, то он обязательно должен ознакомиться с этим стилем и писать так, как пишут все. Иначе - его могут просто уволить. 
Также, т.к. все современные проекты содержаться в системах контроля версиями(cvs; svn,git,hg, etc.), в некоторых компаниях стоит фильтр на плохо форматированный код - невозможно будет добавить плохо отформатированный код в систему. 

У многих компаний этот стиль стандартизирован и его можно посмотреть в открытом доступе :
   * Стиль написания библиотек Qt - [[http://qt.gitorious.org/qt/pages/QtCodingStyle|Qt - QtCodingStyle - Open wiki - Qt by Nokia]]
   * Стиль написания в Google - [[http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml|Google C++ Style Guide]]

Вот еще пример стилей форматирования C++ :
   * [[http://geosoft.no/development/cppstyle.html|C++ Programming Style Guidelines]]
   * [[http://www.possibility.com/Cpp/CppCodingStandard.html|C++ Coding Standard]]
   * [[http://www.chris-lott.org/resources/cstyle/|C and C++ Style Guides]]

Чаще всего понимание стиля форматирования вырабатывается с годами, поэтому нет ничего плохо в том, чтобы за основу брать какой-нибудь хорошо известный стиль форматирования.

===== Операции =====

Всегда разделяйте операции( иногда, не только арифметические) пробелами(но не переусердствуйте).

Сравните :
<code cpp>
int a=5+7/9*(6+8)-6;
</code>
А читабельнее этот код выглядил бы так :
<code cpp>
int a = 5 + 7 / 9 * (6 + 8) - 6;
</code>

Вот еще пример хорошого форматирования ;
<code cpp>
a += c + d;
a = (a + b) / (c * d);
</code>

===== Глобальные переменные =====

Любая глобальная переменная должна начинаться с большой буквы :
<code cpp>
const int N;
int Array[N][N];
</code>
Так вы не спутаете глобальные переменные с локальными.

===== Константы =====

Именуйте ваши константы большими буквами, разделяя, при необходимости, составные слова подчеркиваниями :
Пример хороших констант :
<code cpp>
const int N = 100;
const double PI = 3,14;
const double MAX_ITERATIONS = 100;
</code>

Иногда, константы именуют по первым большим буквам слов :
<code cpp>
const double Pi = 3,14;
const double MaxIterations = 100;
</code>
Такое написание обладает следующим минусом : константы написанные таким образом легко спутать с глобалльными переменными.

===== Переменные итерации =====

Общепринятые имена для переменных итерации - i, j, k. Очень в редких случаях не хватает этих трёх имен. Если у вас в программе не хватает этих трех имен, хорошенько подумайте над дизайном программы - возможно вы что-то делаете не так.

===== Цикл for =====

Переменные итерации, если это цикл for, должны "жить" в нём и распространяться на его. Объяснить это очень просто - раз это переменные итерации, значит они должны итерировать только в цикле, нет необходимости их использовать вне цикла. Очень редко бывают случаи, когда нужно использовать переменные итерации вне области видимости цикла. 

Сравните, плохой код :
<code cpp>
int i = 0;
for(; i < N; i++)
    std::cout << i;
</code>
Или, также плохой код :
<code cpp>
int i = 0;
for(i = 0; i < N; i++)
    std::cout << i;
</code>

И хороший код :
<code cpp>
for(int i = 0; i < N; i++)
    std::cout << i;
</code>
Все современные компиляторы(g++ 4.4 и старше, MSVC 8 и старше) распространяют действие переменной только на внутреннюю область видимости цикла. 
Таким образом, создаем и используем переменные итерации внутри цикла.

===== Числовые константы-литералы =====

Если в вашей программе используются какие-то числовые константы, например размер массива, то создайте переменную-константу для этого числа.

Плохой код :
<code cpp>
int ar[5] = {0, 1, 2, 3, 4};

for (int i = 0; i < 5; i++) {
    std::cout << ar[i];
}
</code>

Хороший код :
<code cpp>
const int N = 5;
int ar[N] = {0, 1, 2, 3, 4};

for (int i = 0; i < N; i++) {
    std::cout << ar[i];
    }
</code>

===== Пустые строки =====

Не пишите код программы подряд на каждой строке по операции, разделяйте по мере возможности код на группы областей пустыми строками :
<code cpp>
int i = 0, j = 0, k = 0;

std::cout << i << j << k;
</code>
В этом небольшом куске кода мы разделили области создания переменных и их вывода на консоль. Разделив большой алгоритм на логические части, можно будет проще контролировать каждую часть - код становится приятнее и читабельнее. Но не злоупотребляйте расстановкой пустых строк.

===== Форматирование области видимости =====

Области видимости или тела функций/классов/циклов/оператороа, разделяемые фигурными скобками должны быть оттабулированы, так будет видно где заканчивается действие той или иной области видимости.

Пример хорошо форматированного кода :

<code cpp>
#include<iostream>

struct Point {
    int x;
    int y;
    };

int main() {     
    for (int i = 0; i < 5; i++) {
        std::cout << "Hello world" << std::endl;
        }
            
    return 0;
    }

</code>

===== Расстановка фигурных скобок =====

Расстановка фигурных скобок во многих командах программистов бывает различной. Расстановка скобок зависит от того, как оформляются функции, сколько пробелов ставится для отступа тела функций и операторов и расположения фигурных скобок.

Подробнее о расстановке фигурных скобок и отступах можно прочитать здесь :
   * [[http://en.wikipedia.org/wiki/Indent_style#Allman_style_.28bsd_in_Emacs.29|Indent style - Wikipedia]]

==== Microsoft Visual Studio / Allman Style ====

Вот пример расстановки фигурных скобок по умолчанию в Microsoft Visual Studio :
<code cpp>
int main(int argc, _TCHAR* argv[])
{
    for (int i = 0; i < 10; i++) 
    {
        std::cout << i;
    }
    
    return 0;
}
</code>
До Visual Studio этот стиль был использован Эриком Оллманом в оформлении стандарта ANSI C, после чего стал называться стилем Оллмана.
Такой стиль очень похож на Horstmann style и GNU style.

==== GNU style ====

GNU-стиль популярен из-за своего дополнительного переноса между типом возвращаемого параметра и названием функции :
<code cpp>
static char *
concat (char *s1, char *s2)
{
  while (x == y)
    {
      something ();
      somethingelse ();
    }
  finalthing ();
}
</code>
По-видимому из-за влияния ФЯ Lisp Ричард Столлман популяризировал этот стиль.


==== Whitesmiths style ====

Можно было бы использовать и такой распространенный стиль :
<code cpp>
int main(int argc, _TCHAR* argv[])
    {
    for (int i = 0; i < 10; i++) 
        {
        std::cout << i;
        }
    
    return 0;
    }
</code>

==== K&R стиль ====
Такой стиль был использован в Керниганом и Ритчи в их известной книге "Язык программирования C" :
<code cpp>
int main(int argc, _TCHAR* argv[]) 
{
    for (int i = 0; i < 10; i++) {
        std::cout << i;
    }
    
    return 0;
}
</code>
Этот стиль расстановки скобок(особенно для вложенных конструкций) также называют египетскими скобками (egyptian brackets).
 
==== Banner C-style ====
Мы будем использовать в основном этот стиль форматрования, на котором закрывающя фигурная скобка также имеет отступ как и тело цикла/функции/if-a и др :
<code cpp>
int main(int argc, _TCHAR* argv[]) {
    for (int i = 0; i < 10; i++) {
        std::cout << i;
        }
    
    return 0;
    }
</code>
Заметьте, что //после закрывающей круглой скобки стоит пробел// и только потом открывающая фигурная скобка.
Этот стиль был выбран из-за своей удобности и простоты в офрмлении кода.

===== Табуляция vs Пробелы =====

Для создания области видимо обычно нажимают <Tab>. Выбор того, как выглядит таб - это один символ табуляции или набор из 4 или 8 пробелов - сугубо индивидуальный. Этот выбор зависит от используемого редактора, т.к. не все редакторы поддерживают замену использования вместо табуляции 4х/8ми пробелов. Однако большинство современных редакторов(Eclipse, Code:Blocks, gedit) поддерживают замену символа табуляции на пробелы.
