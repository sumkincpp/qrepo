                        try lists:foreach(
                            fun(I) ->
                                if %%TODO: think about checkeness
                                   C rem I == 0 andalso C /= I -> throw(stop);
                                   true -> true
                                end
                            end, Primes),
                            true
                        catch
                            throw:stop -> 
                                false
                        end


case_process(A, B, N, PPID, Primes) ->
    io:format("Starting Process ~b ~n ", N),
    if A == 1 orelse A == 2 -> 
%       io:fwrite(Out, "~w~n", [2]), 
           PPID ! {ping, self(), 2},
           A2 = 3;
       true -> A2 = (A - A rem 2) + 1
    end,
    lists:foreach(fun(C) ->  
        try lists:foreach(
            fun(I) ->
                if %%TODO: think about checkeness
                   C rem I == 0 andalso C /= I -> throw(stop);
                   true -> true
                end
            end, Primes),
                PPID ! {ping, self(), C},
                io:format("Sending! ~b ~n", C),
%            io:fwrite(Out, "~w~n", [C]),
            true
        catch
            throw:stop -> 
                false
        end
    end, lists:seq(A2, B, 2)),
    PPID ! {finished, N},
    true.
%,    io:fwrite(Out, "~n", []).

